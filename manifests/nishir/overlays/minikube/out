apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: nfs
mountOptions:
- vers=4.1
provisioner: sigs.k8s.io/nfs
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nishir
  name: nishir
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: leader-locking-nfs-provisioner
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: nfs-provisioner-runner
rules:
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - persistentvolumeclaims
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
- apiGroups:
  - extensions
  resourceNames:
  - nfs-provisioner
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: leader-locking-nfs-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: leader-locking-nfs-provisioner
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: run-nfs-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nfs-provisioner-runner
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
apiVersion: v1
data: {}
immutable: true
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: transmission-nishir
  name: transmission-46f8b28mk5
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jellyfin
    app.kubernetes.io/instance: jellyfin-nishir
    app.kubernetes.io/name: jellyfin
    app.kubernetes.io/version: 10.7.7
  name: jellyfin
spec:
  ports:
  - name: http
    port: 8096
    targetPort: http
  selector:
    app: jellyfin
    app.kubernetes.io/instance: jellyfin-nishir
    app.kubernetes.io/name: jellyfin
    app.kubernetes.io/version: 10.7.7
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: jellyfin
    app.kubernetes.io/instance: jellyfin-nishir
    app.kubernetes.io/name: jellyfin
    app.kubernetes.io/version: 10.7.7
  name: jellyfin-udp
spec:
  ports:
  - name: client
    port: 7359
    protocol: UDP
    targetPort: client
  - name: service
    port: 1900
    protocol: UDP
    targetPort: service
  selector:
    app: jellyfin
    app.kubernetes.io/instance: jellyfin-nishir
    app.kubernetes.io/name: jellyfin
    app.kubernetes.io/version: 10.7.7
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nfs-provisioner
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: nfs-provisioner
spec:
  ports:
  - name: nfs
    port: 2049
  - name: nfs-udp
    port: 2049
    protocol: UDP
  - name: nlockmgr
    port: 32803
  - name: nlockmgr-udp
    port: 32803
    protocol: UDP
  - name: mountd
    port: 20048
  - name: mountd-udp
    port: 20048
    protocol: UDP
  - name: rquotad
    port: 875
  - name: rquotad-udp
    port: 875
    protocol: UDP
  - name: rpcbind
    port: 111
  - name: rpcbind-udp
    port: 111
    protocol: UDP
  - name: statd
    port: 662
  - name: statd-udp
    port: 662
    protocol: UDP
  selector:
    app: nfs-provisioner
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: transmission
    app.kubernetes.io/instance: transmission-nishir
    app.kubernetes.io/name: transmission
    app.kubernetes.io/version: 3.00-r2
  name: transmission
spec:
  ports:
  - name: http
    port: 9091
    targetPort: http
  - name: utp
    port: 51413
    targetPort: utp
  selector:
    app: transmission
    app.kubernetes.io/instance: transmission-nishir
    app.kubernetes.io/name: transmission
    app.kubernetes.io/version: 3.00-r2
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: transmission
    app.kubernetes.io/instance: transmission-nishir
    app.kubernetes.io/name: transmission
    app.kubernetes.io/version: 3.00-r2
  name: transmission-udp
spec:
  ports:
  - name: utp-udp
    port: 51413
    protocol: UDP
    targetPort: utp-udp
  selector:
    app: transmission
    app.kubernetes.io/instance: transmission-nishir
    app.kubernetes.io/name: transmission
    app.kubernetes.io/version: 3.00-r2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: jellyfin
    app.kubernetes.io/instance: jellyfin-nishir
  name: jellyfin-config
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: nishir
  name: nfs-provisioner-export
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: nishir
    app.kubernetes.io/instance: nishir
    app.kubernetes.io/name: nishir
    app.kubernetes.io/version: v0.1.0
  name: nishir-downloads
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: nishir
    app.kubernetes.io/instance: nishir
    app.kubernetes.io/name: nishir
    app.kubernetes.io/version: v0.1.0
  name: nishir-movies
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: nishir
    app.kubernetes.io/instance: nishir
    app.kubernetes.io/name: nishir
    app.kubernetes.io/version: v0.1.0
  name: nishir-torrents
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Mi
  storageClassName: nfs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: transmission
    app.kubernetes.io/instance: transmission-nishir
  name: transmission-config
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jellyfin
    app.kubernetes.io/instance: jellyfin-nishir
    app.kubernetes.io/name: jellyfin
    app.kubernetes.io/version: 10.7.7
  name: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
      app.kubernetes.io/instance: jellyfin-nishir
      app.kubernetes.io/name: jellyfin
      app.kubernetes.io/version: 10.7.7
  template:
    metadata:
      labels:
        app: jellyfin
        app.kubernetes.io/instance: jellyfin-nishir
        app.kubernetes.io/name: jellyfin
        app.kubernetes.io/version: 10.7.7
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Europe/Paris
        image: docker.io/linuxserver/jellyfin:10.7.7@sha256:9ef53374076d584e5c4b26f3f5ec79688bb76d2af3da7de80be6b1819ff3957f
        name: jellyfin
        ports:
        - containerPort: 8096
          name: http
        - containerPort: 7359
          name: client
          protocol: UDP
        - containerPort: 1900
          name: service
          protocol: UDP
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /data/movies
          name: movies
        - mountPath: /data/downloads
          name: downloads
        - mountPath: /cache
          name: cache
      serviceAccountName: nishir
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: jellyfin-config
      - name: movies
        persistentVolumeClaim:
          claimName: nishir-movies
      - name: downloads
        persistentVolumeClaim:
          claimName: nishir-downloads
      - emptyDir: {}
        name: cache
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nfs-provisioner
    app.kubernetes.io/instance: nfs-provisioner
    app.kubernetes.io/name: nfs-provisioner
    app.kubernetes.io/version: v3.0.0
  name: nfs-provisioner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-provisioner
      app.kubernetes.io/instance: nfs-provisioner
      app.kubernetes.io/name: nfs-provisioner
      app.kubernetes.io/version: v3.0.0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-provisioner
        app.kubernetes.io/instance: nfs-provisioner
        app.kubernetes.io/name: nfs-provisioner
        app.kubernetes.io/version: v3.0.0
    spec:
      containers:
      - args:
        - -provisioner=sigs.k8s.io/nfs
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SERVICE_NAME
          value: nfs-provisioner
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: k8s.gcr.io/sig-storage/nfs-provisioner:v3.0.0@sha256:2de1d15fc1f2a33618c61ff8d499ef22a7b2b8961952f059656a245b98498ba4
        name: nfs-provisioner
        ports:
        - containerPort: 2049
          name: nfs
        - containerPort: 2049
          name: nfs-udp
          protocol: UDP
        - containerPort: 32803
          name: nlockmgr
        - containerPort: 32803
          name: nlockmgr-udp
          protocol: UDP
        - containerPort: 20048
          name: mountd
        - containerPort: 20048
          name: mountd-udp
          protocol: UDP
        - containerPort: 875
          name: rquotad
        - containerPort: 875
          name: rquotad-udp
          protocol: UDP
        - containerPort: 111
          name: rpcbind
        - containerPort: 111
          name: rpcbind-udp
          protocol: UDP
        - containerPort: 662
          name: statd
        - containerPort: 662
          name: statd-udp
          protocol: UDP
        resources:
          limits:
            cpu: 120m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          capabilities:
            add:
            - DAC_READ_SEARCH
            - SYS_RESOURCE
        volumeMounts:
        - mountPath: /export
          name: export
      serviceAccountName: nishir
      volumes:
      - name: export
        persistentVolumeClaim:
          claimName: nfs-provisioner-export
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: transmission
    app.kubernetes.io/instance: transmission-nishir
    app.kubernetes.io/name: transmission
    app.kubernetes.io/version: 3.00-r2
  name: transmission
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transmission
      app.kubernetes.io/instance: transmission-nishir
      app.kubernetes.io/name: transmission
      app.kubernetes.io/version: 3.00-r2
  template:
    metadata:
      labels:
        app: transmission
        app.kubernetes.io/instance: transmission-nishir
        app.kubernetes.io/name: transmission
        app.kubernetes.io/version: 3.00-r2
    spec:
      containers:
      - env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: Europe/Paris
        - name: USER
          valueFrom:
            secretKeyRef:
              key: username
              name: transmission-46f8b28mk5
        - name: PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: transmission-46f8b28mk5
        image: docker.io/linuxserver/transmission:version-3.00-r2@sha256:ad0a3842503166225119227d1c085fd979bc68074d250199e0ee2046e22fa45e
        name: transmission
        ports:
        - containerPort: 9091
          name: http
        - containerPort: 51413
          name: utp
        - containerPort: 51413
          name: utp-udp
          protocol: UDP
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /config
          name: config
        - mountPath: /watch
          name: watch
        - mountPath: /downloads
          name: downloads
      serviceAccountName: nishir
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: transmission-config
      - name: watch
        persistentVolumeClaim:
          claimName: nishir-torrents
      - name: downloads
        persistentVolumeClaim:
          claimName: nishir-downloads
